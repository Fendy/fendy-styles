/***************************************************************************
  Parallax Effect using CSS 3D transforms ðŸ”¥                               *
                                                                           *
  Based on:                                                                *
  https://developers.google.com/web/updates/2016/12/performant-parallaxing *
  https://codepen.io/scottkellum/details/bHEcA                             *
  https://keithclark.co.uk/articles/pure-css-parallax-websites/            *
 ***************************************************************************/

.o-parallax {
  width: 100%;
  height: 100vh;
  overflow: hidden;
  overflow-y: auto;
  perspective: 1px;
  transform-style: preserve-3d;
  // -webkit-overflow-scrolling: touch;

  // Ensure 3D is preserved no matter the markup
  &,
  * {
    transform-style: preserve-3d;
  }
}

.o-parallax__section {
  position: relative;
  height: 100vh;
  // perspective: 1px;
}

@mixin parallax-perspective($distance: 0) {
  transform: translateZ($distance * 1px) scale(1 + ($distance * -1 / 1));
}

%o-parallax__layer {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  transform-origin: 50%;
  // position: -webkit-sticky;
  border: 1px solid #000000;
}

.o-parallax__layer--fore {
  @extend %o-parallax__layer;
  @include parallax-perspective(0.4);
  z-index: 5;
}

.o-parallax__layer--base {
  @extend %o-parallax__layer;
  @include parallax-perspective(0);
  z-index: 0;
}

.o-parallax__layer--back {
  @extend %o-parallax__layer;
  @include parallax-perspective(-1);
  z-index: -5;
}

.o-parallax__layer--deep {
  @extend %o-parallax__layer;
  @include parallax-perspective(-2);
  z-index: -10;
}
